use serenity::{
    async_trait,
    model::{channel::Message, gateway::Ready},
    prelude::*,
};
use std::env;
use dotenv::dotenv;

struct Handler;

#[async_trait]
impl EventHandler for Handler {
    async fn message(&self, ctx: Context, msg: Message) {
        if msg.author.bot {
            return; // Ignora mensagens de bots
        }

        match msg.content.as_str() {
            "!ping" => {
                let _ = msg.channel_id.say(&ctx.http, "üèì Pong!").await;
            }
            "!bot" => {
                let _ = msg.channel_id.say(&ctx.http, "ü§ñ Estou vivo em Rust!").await;
            }
            _ => {}
        }
    }

    async fn ready(&self, _: Context, ready: Ready) {
        println!("‚úÖ Conectado como {}", ready.user.name);
    }
}

#[tokio::main]
async fn main() {
    dotenv().ok();
    let token = env::var("DISCORD_TOKEN").expect("‚ùå Token do Discord n√£o encontrado no .env");

    let intents = GatewayIntents::GUILD_MESSAGES | GatewayIntents::MESSAGE_CONTENT;

    let mut client = Client::builder(&token, intents)
        .event_handler(Handler)
        .await
        .expect("‚ùå Erro ao criar o client");

    if let Err(why) = client.start().await {
        eprintln!("Erro ao iniciar o bot: {:?}", why);
    }
}
